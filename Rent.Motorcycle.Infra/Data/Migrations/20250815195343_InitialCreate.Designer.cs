// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rent.Motorcycle.Infra.Data;

#nullable disable

namespace Rent.Motorcycle.Infra.Data.Migrations
{
    [DbContext(typeof(RentDbContext))]
    [Migration("20250815195343_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.DeliveryRider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DeliveryRiders");
                });

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasRentals")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.Rental", b =>
                {
                    b.Property<int>("IdRental")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRental"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("DeliveryRiderId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("ExpectedEndDate")
                        .HasColumnType("date");

                    b.Property<int>("IdDeliveryRider")
                        .HasColumnType("integer");

                    b.Property<string>("IdMotorcycle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LateExtraDailyFee")
                        .HasColumnType("numeric");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("IdRental");

                    b.HasIndex("DeliveryRiderId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Rent.Motorcycle.Infra.Data.MotoRegisteredEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("moto_registered_events", (string)null);
                });

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.DeliveryRider", b =>
                {
                    b.OwnsOne("Rent.Motorcycle.Domain.ValueObjects.CNH", "Cnh", b1 =>
                        {
                            b1.Property<int>("DeliveryRiderId")
                                .HasColumnType("integer");

                            b1.Property<string>("CnhImageUrl")
                                .HasColumnType("text")
                                .HasColumnName("CnhImageUrl");

                            b1.Property<string>("CnhNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("CnhNumber");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("CnhType");

                            b1.HasKey("DeliveryRiderId");

                            b1.ToTable("DeliveryRiders");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryRiderId");
                        });

                    b.Navigation("Cnh")
                        .IsRequired();
                });

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.Motorcycle", b =>
                {
                    b.HasOne("Rent.Motorcycle.Domain.Entities.Admin", null)
                        .WithMany("Motorcycles")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.Rental", b =>
                {
                    b.HasOne("Rent.Motorcycle.Domain.Entities.DeliveryRider", null)
                        .WithMany("Rentals")
                        .HasForeignKey("DeliveryRiderId");
                });

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.Admin", b =>
                {
                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("Rent.Motorcycle.Domain.Entities.DeliveryRider", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
